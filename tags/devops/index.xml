<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>devops on Jardel's blog</title><link>/tags/devops/</link><description>Recent content in devops on Jardel's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 03 Jul 2021 09:32:00 +0000</lastBuildDate><atom:link href="/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>docker mysql 数据备份脚本shell（基于crontab）</title><link>/2021/07/docker-mysql-backup/</link><pubDate>Sat, 03 Jul 2021 09:32:00 +0000</pubDate><guid>/2021/07/docker-mysql-backup/</guid><description>定时备份数据库 新建一个backup.sh用于备份成sql文件
#! /bin/bash BACKUP_DIR=&amp;quot;&amp;lt;备份sql保存位置&amp;gt;&amp;quot; LOG_FILE=&amp;quot;&amp;lt;LOG文件位置&amp;gt;&amp;quot; DATE=`date +%Y-%m-%d_%H-%M` USER=&amp;quot;数据库用户名&amp;quot; PASSWORD=&amp;quot;数据库密码&amp;quot; DATABASE=&amp;quot;数据库名&amp;quot; SQL_FILE=&amp;quot;mysql_$DATE.sql&amp;quot; DOCKER_TAG=&amp;quot;数据库docker name&amp;quot; if [! -d $BACKUP_DIR]; then mkdir -p &amp;quot;$BACKUP_DIR&amp;quot; fi echo -e &amp;quot;\n&amp;quot; &amp;gt;&amp;gt; $LOG_FILE cd $BACKUP_DIR docker exec -i $DOCKER_TAG mysqldump -u$USER -p$PASSWORD $DATABASE &amp;gt; $SQL_FILE if [[ $? == 0 ]]; then tar czvf $SQL_FILE.gz $SQL_FILE &amp;gt;&amp;gt; $LOG_FILE 2&amp;gt;&amp;amp;1 echo &amp;quot;$DATE----- $SQL_FILE.gz backup success!&amp;quot; &amp;gt;&amp;gt; $LOG_FILE rm -f $SQL_FILE else echo &amp;quot;$DATE----- $SQL_FILE.gz backup fail!&amp;quot; &amp;gt;&amp;gt; $LOG_FILE fi 定时删除超过规定时间的备份文件 新建一个clear_backup.</description></item><item><title>基于adb命令获取app 内存 FPS CPU 占用信息</title><link>/2021/06/adb-shell/</link><pubDate>Fri, 04 Jun 2021 17:48:56 +0000</pubDate><guid>/2021/06/adb-shell/</guid><description>adb shell am [command] am =&amp;gt;是activity manager的缩写,它可以启动activity,启动service,发送广播等 pm =&amp;gt;就是package manager的缩写.
发送一条广播
adb -s BH909NJ676 shell am broadcast adb 获取内存占用 adb shell dumpsys meminfo -h meminfo dump options: [-a] [-d] [-c] [-s] [--oom] [process] -a: include all available information for each process. -d: include dalvik details. -c: dump in a compact machine-parseable representation. -s: dump only summary of application memory usage. -S: dump also SwapPss. --oom: only show processes organized by oom adj.</description></item><item><title>Ubuntu UFW 防火墙常用使用操作</title><link>/2021/06/ubuntu-ufw/</link><pubDate>Fri, 04 Jun 2021 09:48:55 +0000</pubDate><guid>/2021/06/ubuntu-ufw/</guid><description>安装 Ubuntu20.04一般都默认安装了UFW（Uncomplicated Firewall），它是一款轻量化的工具，主要用于对输入输出的流量进行监控。如果没有安装，请用下面的命令安装：
apt install ufw 安装成功后查看状态
ufw status verbose 启用UFW
ufw enable ufw default deny 允许外部访问指定端口
ufw allow 53 允许指定IP访问全部端口
ufw allow from &amp;lt;IP&amp;gt; 允许指定的IP访问指定的端口
ufw allow proto tcp from 192.168.0.0/24 to any port 22 删除某一条端口规则配置
ufw delete allow &amp;lt;PORT&amp;gt;</description></item></channel></rss>